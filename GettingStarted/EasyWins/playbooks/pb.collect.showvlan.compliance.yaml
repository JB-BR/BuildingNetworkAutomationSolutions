---
- hosts: lab
  gather_facts: false
  tasks:
    - name: Task 1 - Collect the VLANs using Arista eAPI and save the result in the show_vlan variable
      arista.eos.eos_command:
        commands:
           - command: show vlan
             output: json
      register: show_vlan

    - name: Task 2 - Display the vlans JSON object contained in the show_vlan variable
      debug: var=show_vlan.stdout[0].vlans 
            # show_vlan is a json object containing many parameters like ansible_facts, failed status, stdout_lines and stdout.
            # stdout is an array containing only one json object, thus only need stdout[0]
            # vlans is one of the json obecjts inside stdout[0] and it contains the vlans sorted by ID

    - name: Task 3 - Add all the VLAN names in a single array using JMESPath "Object Projections"
      set_fact:
        vlan_list: "{{ show_vlan.stdout[0].vlans | community.general.json_query('*.name') }}"

    - name: Task 4 - Display the content of vlan_list
      debug: var=vlan_list

    - name: Task 5 - Initialize the compliance report variables
      set_fact:
        report_status: true
        report_reason: []

    - name: Task 6 - Naming convention compliance check.
      loop: "{{ vlan_list }}"                                          # For each item in vlan list
      when: not item is regex("^[0-9]{1,4}-[A-Z]{3,6}-[a-zA-Z0-9_]*$") # If the item doese not match the naming convention
      set_fact:                                                        # Then set the compliance report to "false" and append the item the the reason list
        report_status: false
        report_reason: "{{ report_reason + [item] }}"                  # The "+" can only merge lists together, thus item is placed between square brackets

#    - name: Task 7 - Create the report
#      lineinfile:
#        path: /tmp/compliance_vlan_names_arista.task7.json
#        create: yes
#        regexp: '^.*{{ inventory_hostname }}'                          # Look if a line already exists for the current target host and update it. If the line does not exist, it is created.
#        line: |                                                        # The pipe indicates Ansible that a multiline input will follow
#              { "{{ inventory_hostname }}": {"status": {{report_status}}, "reason": {{report_reason}} }}

- hosts: localhost
  tasks:
    - name: Task 7 - Create the report
      copy:
        content: |
                 {
                    "hosts": {{ vars.hostvars | community.general.json_query('*.inventory_hostname')}},
                    "status": {{ vars.hostvars | community.general.json_query('*.report_status')}},
                    "reason": {{ vars.hostvars | community.general.json_query('*.report_reason')}}
                 }
        dest: /tmp/compliance_vlan_names_arista.json